{-# LANGUAGE OverloadedStrings #-}
-- (Original form generated by stack new)
-- module Main where

-- import Lib

-- main :: IO ()
-- main = someFunc


module Main where

import Lib-- new
import Data.Text as T
import Data.Text.IO as TIO -- ( getLine )

-- import qualified PalindromeText -- as Palin  (Alterantive short name) (Not required for stack built project)


-- isPalindrome :: T.Text -> Bool
-- isPalindrome text = text == T.reverse text -- this only works for racecar but not A man a plan a canal Panama
-- from unit6/lesson34/l34_exercises/Main.hs
-- main :: IO ()
-- main = do
--     print "Enter a word and I'll let you know if it's a palindrome!"
--     text <- TIO.getLine
--     let response = if isPalindrome text  -- rely on the import isPalindrome fuunction from PalindromeText.hs in the same directory -- (with alternative short name)  = if Palin.isPalindromeText text

--                     then "it is!"
--                     else "it's not!"
--     print response

main :: IO ()
main = do
    TIO.putStrLn "Enter a word and I'll let you know if it's a palindrome!"
    text <- TIO.getLine
    let response = if isPalindrome text
                   then "it is"
                   else "it's not!"
    TIO.putStrLn response